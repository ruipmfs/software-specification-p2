report:
  - bug 1:
      type: Null Dereference
      lineno: 76
      class: tp
      description: "Null dereference when accessing 'map' without checking for null."
      recommendation: "Ensure that 'map' is not null before accessing its members."
  
  - bug 2:
      type: Memory Leak
      lineno: 130
      class: tp
      description: "Memory leak when 'value' is not null and memory is allocated but not freed."
      recommendation: "Free 'val' memory when it's no longer needed."
  
  - bug 3:
      type: Memory Leak
      lineno: 156
      class: tp
      description: "Memory leak when 'val' is allocated but not freed before returning."
      recommendation: "Free 'val' memory before returning."

    - bug 4:
      type: Null Dereference
      lineno: 156
      class: tp
      description: "Null dereference when accessing 'val' without checking for null."
      recommendation: "Ensure that 'val' is not null before accessing it."
  
  - bug 5:
      type: Nullptr Dereference
      lineno: 163
      class: tp
      description: "Potential null pointer dereference when calling 'hashmap_new()'."
      recommendation: "Ensure that the 'map' returned by 'hashmap_new()' is not null."

  - bug 6:
      type: Null Dereference
      lineno: 72
      class: tp
      description: "Dereferencing a null pointer when accessing 'field->size'."
      recommendation: "Ensure that 'field' is not null before accessing its members."

  - bug 7:
      type: Buffer Overflow
      lineno: 124
      class: tp
      description: 
      recommendation: "Ensure that memory allocation is based on the appropriate size, such as 'strlen(key) + 1' for null-terminated strings."

  - bug 8:
      type: Memory Leak
      lineno: 170
      class: fp
      description: "Não é necessário dar free do ret"
      recommendation: 

  - bug 9:
      type: Buffer Overflow
      lineno: 125
      class: tp
      description: "Call to function 'strcpy' is insecure and may result in a buffer overflow, as it does not provide bounding of the memory buffer. Replace unbounded copy functions with analogous functions that support length arguments such as 'strlcpy'. CWE-119 [security.insecureAPI.strcpy]"
      recommendation: "Replace 'strcpy' with 'strncpy' and specify the maximum buffer size to prevent buffer overflows. Don't forget to terminate the string with a null character."
  
  - bug 10:
      type: Buffer Overflow
      lineno: 132
      class: tp
      description: "Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provide boundary checks such as 'memcpy_s' in case of C11. [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]"
      recommendation: "Replace 'memcpy' with 'memcpy_s' or other functions that provide length arguments to ensure secure memory copying."

  - bug 11:
      type: Buffer Overflow
      lineno: 138
      class: tp
      description: "Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provide boundary checks such as 'memcpy_s' in case of C11. [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]"
      recommendation: "Replace 'memcpy' with 'memcpy_s' or other functions that provide length arguments to ensure secure memory copying."

  - bug 12:
      type: Buffer Overflow
      lineno: 156
      class: tp
      description: "Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provide boundary checks such as 'memcpy_s' in case of C11. [security.insecureAPI.DeprecatedOrUnsafeBufferHandling]"
      recommendation: "Replace 'memcpy' with 'memcpy_s' or other functions that provide length arguments to ensure secure memory copying."